# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

stream-reader-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 30
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

play.modules.enabled += "code.io.udp.InfoSinkModule"
play.modules.enabled += "code.collection.HostModule"
play.modules.enabled += "code.collection.CollectionServiceModule"
play.modules.enabled += "code.collection.CollectionModule"

my.port = 6776

mongo {
  uri = "mongodb://localhost"
  db = aggregator_dev
}

akka.loglevel = DEBUG

aggregator {
  executors {
    default-executor {
      access {
        ssh-commands: [ssh]
        commands: [
          java
          -Xmx256M
          -cp
          ${user.dir}/agent/target/collector-agent-0.1-SNAPSHOT.jar
          "-agentlib:jdwp=transport=dt_socket,server=n,address=h236.146.228.10.30760.vlan.kuins.net:5006,suspend=y"
          org.eiennohito.CollectorAgent
        ]
        use-java: true
      }
    }
  }

  collection {
    targets: {

      //      data: {
      //        pattern: "/data/:user/*"
      //        hosts: [basil203..204,basil304..306]
      //      }

      tmp: {
        pattern: ${user.home}/dev"/:user/*"
        hosts: [localhost]
        any-host: true
      }

      //      violet: {
      //        pattern: "/mnt/violet/:user/*"
      //        hosts: [basil202,basil203]
      //        any-host: true
      //      }
    }

    tick-inteval = 1 minute
    max-concurrency = 3
    scan-ttl = 6.2 days
  }
}
